import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.vgg16 import VGG16
import matplotlib.pyplot as plt

# Налаштування шляхів до даних
train_data_dir = 'planes'
test_data_dir = 'test'

# Генератори даних
train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    subset='training')

validation_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    subset='validation')

test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical')

# Функція для створення та тренування моделі
def train_model(model, train_gen, val_gen, epochs=10):
    history = model.fit(train_gen, epochs=epochs, validation_data=val_gen)
    return history

# Функція для візуалізації результатів
def plot_model_performance(history, title):
    acc = history.history['accuracy']
    val_acc = history.history['val_accuracy']
    loss = history.history['loss']
    val_loss = history.history['val_loss']
    epochs = range(1, len(acc) + 1)

    plt.figure(figsize=(12, 4))
    plt.subplot(1, 2, 1)
    plt.plot(epochs, acc, 'b', label='Training Accuracy')
    plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')
    plt.title(title + ' - Training and Validation Accuracy')
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(epochs, loss, 'b', label='Training Loss')
    plt.plot(epochs, val_loss, 'r', label='Validation Loss')
    plt.title(title + ' - Training and Validation Loss')
    plt.legend()

    plt.show()

# Модель логістичної регресії
logistic_model = Sequential([
    Flatten(input_shape=(150, 150, 3)),
    Dense(6, activation='softmax')  # 6 класів
])
logistic_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
logistic_history = train_model(logistic_model, train_generator, validation_generator)
plot_model_performance(logistic_history, 'Logistic Regression')

# Проста CNN модель
simple_cnn_model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(6, activation='softmax')  # 6 класів
])
simple_cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
simple_cnn_history = train_model(simple_cnn_model, train_generator, validation_generator)
plot_model_performance(simple_cnn_history, 'Simple CNN')

# Передтренована модель VGG16
base_model = VGG16(input_shape=(150, 150, 3), include_top=False, weights='imagenet')
base_model.trainable = False
advanced_model = Sequential([
    base_model,
    Flatten(),
    Dense(256, activation='relu'),
    Dense(6, activation='softmax')  # 6 класів
])
advanced_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
advanced_history = train_model(advanced_model, train_generator, validation_generator)
plot_model_performance(advanced_history, 'Advanced Model')
